# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Gw5CAuJLkQQfh7UKuhvAKfmz7_pXs4a
"""

!pip install googletrans==4.0.0-rc1

from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
from googletrans import Translator
import json

def translate_to_english(query):
    """
    Translates a query from Vietnamese to English using Google Translate.

    Args:
        query (str): The query in Vietnamese.

    Returns:
        str: Translated query in English.
    """
    translator = Translator()
    translated = translator.translate(query, src="vi", dest="en")
    return translated.text

import spacy

def extract_classes(query):
    """
    Extract class names (like dogs and cats) from a natural language query.

    Args:
        query (str): The input query.

    Returns:
        list: A list of extracted class names.
    """
    query = translate_to_english(query)
    # Load spaCy language model
    nlp = spacy.load("en_core_web_sm")
    doc = nlp(query)

    # Keywords to detect the context
    context_keywords = {"sound", "class", "category"}

    # Extract nouns potentially linked to classes
    class_names = []
    for token in doc:
        if token.pos_ == "NOUN" and token.text.lower() not in context_keywords:
            class_names.append(token.text.lower())

    return class_names

query = "lấy tiếng xe máy"
print(translate_to_english(query))
indices = extract_classes(query)
print("Identified indices:", indices)

!git clone https://github.com/AnhTuan2003ml/Lass.git

!wget -c https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
!bash Miniconda3-latest-Linux-x86_64.sh -b -f -p /usr/local
!conda install -q -y --prefix /usr/local python=3.9
import os
os.environ["PATH"] = "/usr/local/bin:" + os.environ["PATH"]
!conda --version

!cd /content/LASS && conda env create -f environment.yml && conda activate LASS

!conda env create -f /content/Lass/environment.yml

!python /content/Lass/inference.py -q AudioCaps

